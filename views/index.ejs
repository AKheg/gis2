<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet"> 
  <link rel="stylesheet" href="ol3-sidebar.css">
  <style>
		form {
			overflow: hidden;
		}
		form.art1 {
			text-align:right;
			width: 250px;
		}
		input {
			width: 150px;
			float: right;
			clear: both;
		}
		input[type='file'] {
			color: transparent;
		}
         body {
			height: 100%;
            padding: 0;
            margin: 0;
            font-family: arial;
        }

        html, body{
            height: 100%;
            font: 10pt "Helvetica Neue", Arial, Helvetica, sans-serif;
        }

        .lorem {
            font-style: italic;
            color: #AAA;
        }
        
        #modify_feature {
            position: absolute;
            z-index: 500;
            top: 1%;
            left: 26%;
        }
        
        #get_info {
            position: absolute;
            z-index: 500;
            top: 1%;
            left: 70%;

        }
        #toggle_editing {
            position: absolute;
            z-index: 500;
            top: 1%;
            left: 55%;
        }
        #map {
            position: absolute;
            top: 0%;
            left: 0%;
            width: 100%;
            height: 100%;
            overflow: scroll;
            border: 0.5px solid #4CAF50;
        }
        .ol-popup {
            position: absolute;
            background-color: white;
            -webkit-filter: drop-shadow(0 1px 4px rgba(0, 0, 0, 0.2));
            filter: drop-shadow(0 1px 4px rgba(0, 0, 0, 0.2));
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #cccccc;
            bottom: 12px;
            left: -50px;
            min-width: 280px;
        }

        .ol-popup:after,
        .ol-popup:before {
            top: 100%;
            border: solid transparent;
            content: " ";
            height: 0;
            width: 0;
            position: absolute;
            pointer-events: none;
        }

        .ol-popup:after {
            border-top-color: white;
            border-width: 10px;
            left: 48px;
            margin-left: -10px;
        }

        .ol-popup:before {
            border-top-color: #cccccc;
            border-width: 11px;
            left: 48px;
            margin-left: -11px;
        }

        .ol-popup-closer {
            text-decoration: none;
            position: absolute;
            top: 2px;
            right: 8px;
        }

        .ol-popup-closer:after {
            content: "X";
        
        }

    </style>
</head>
<body>

  <div id="sidebar" class="sidebar collapsed">
    <!-- Nav tabs -->
    <div class="sidebar-tabs">
        <ul role="tablist">
            <li><a href="#search" role="tab"><i class="fa fa-search"></i></a></li>
            <li><a href="#user" role="tab"><i class="fa fa-user"></i></a></li>
        </ul>

        <ul role="tablist">
            <li class="disabled"><a href="#settings" role="tab"><i class="fa fa-gear"></i></a></li>
        </ul>
    </div>

    <!-- Tab panes -->
    <div class="sidebar-content">

        <div class="sidebar-pane" id="search">
            <h1 class="sidebar-header">Поиск<span class="sidebar-close"><i class="fa fa-caret-left"></i></span></h1>
            <h2>Поиск:</h2>
            <form id="search" class="art1">
                <input type='search' id="kn" kn-search>
            
                <select name="kn" id="kn2">
                </select>
            </form>
        </div>

        <div class="sidebar-pane" id="user">
            <h1 class="sidebar-header">Пользователь<span class="sidebar-close"><i class="fa fa-caret-left"></i></span></h1>
            <h2><a href="/auth/login">Вход</a></h2>
        </div>

        <div class="sidebar-pane" id="settings">
            <h1 class="sidebar-header">Настройки<span class="sidebar-close"><i class="fa fa-caret-left"></i></span></h1>
        </div>
    </div>
  </div>
  <div id="map" class="map"></div>
  <div id="popup" class="ol-popup">
    <a href="#" id="popup-closer" class="ol-popup-closer"></a>
    <div id="popup-content">
    </div>
  </div>
  <!-- <script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.9.0/build/ol.js"></script> -->
  <script src="ol.js"></script>
  <script src="ol3-sidebar.js"></script>
  <script>
    const graves = '<%- JSON.stringify(graves) %>';

    const vectorSourceGraves = new ol.source.Vector({
	    features: new ol.format.GeoJSON().readFeatures(graves),
    });

    const style_base = new ol.style.Style({
        stroke: new ol.style.Stroke({
            color: 'rgba(255, 0, 0, 1)',
            width: 2,
        }),
            fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0)',
        }),
        text: new ol.style.Text({
            font: 'bold 14px "Times New Roman", "Arial Unicode MS", "sans-serif"',
            fill: new ol.style.Fill({
                color: 'black',
            }),
        }),
    });
    const highlightStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(255,255,255,0.35)',
        }),
        stroke: new ol.style.Stroke({
            color: '#0000FF',
            width: 4,
        }),
        text: new ol.style.Text({
            font: 'bold 11px "Open Sans", "Arial Unicode MS", "sans-serif"',
            placement: 'point',
            fill: new ol.style.Fill({
            color: 'black',
            }),
        }),
    });

    const vectorGraves = new ol.layer.Vector({
        minZoom: 13,
        source: vectorSourceGraves,
        style: function (feature) {
            style_base.getText().setText(feature.get('id').toString());
            return style_base;
        },
    });

    const container = document.getElementById('popup');
    const content = document.getElementById('popup-content');
    const closer = document.getElementById('popup-closer');

    const overlay = new ol.Overlay({
    element: container,
    autoPan: {
        animation: {
        duration: 250,
        },
    },
    });

    const centreLonLat = [29.8559,57.6346];
    const centreWebMercator = ol.proj.fromLonLat(centreLonLat);  

    const view =  new ol.View({
        projection: 'EPSG:3857',
        center: centreWebMercator,
        zoom: 19.2
    });

    const osmLayer = new ol.layer.Tile({
                        title: 'OSM',
                        type: 'base',
                        visible: true,
                        source: new ol.source.OSM()
                    });

    var layers = [osmLayer, vectorGraves];

    var map = new ol.Map({
        target: 'map',
        controls: [],
        layers: layers,
        overlays: [overlay],
        view: view
    });

    const select = new ol.interaction.Select({
            layers: [vectorGraves], style: function (feature) {
                highlightStyle.getText().setText(feature.get('id').toString());
                return highlightStyle;
            }, condition: ol.events.condition.singleClick,
        });
    const sidebar = new ol.control.Sidebar({ element: 'sidebar', position: 'left' });
    map.addControl(sidebar);
    map.addInteraction(select);
    map.on('singleclick', highlight_info);

    function highlight_info(evt) {
        const coordinate = evt.coordinate;
        const hdms = ol.coordinate.toStringHDMS(ol.proj.fromLonLat(coordinate));
        var features = map.getFeaturesAtPixel(evt.pixel, {
            layerFilter: function (layer) {
                return layer === vectorGraves;
            },
        });
        if (features.length > 0) {
            var n = features[0].get('id').toString();
            var name = features[0].get('name');
            var id = features[0].get('id');
            var extra = features[0].get('extra');
            var born = features[0].get('born');
            var died = features[0].get('died');
            var life = "";
            if (born) {
                life = born + " - " + died;
            } else {
                if (died) {
                    life = "Дата смерти: " + died;
                }
            }
            var doc = features[0].get('doc');
            var link = "";
            if (doc) {
                link = "Документ"
            }
            var pic = features[0].get('pic')
            if (pic == undefined || pic == "") {
                pic = 'default.jpg'
            }
            content.innerHTML = '<img src="' + 'images/' + pic + '" style="width: 300px; height: 450px;">' + '<p><code>' + extra + '</code></p>' + '<h2><code>' + name + '</code></h2><p><code>' + life + '</code></p><a href="pdf/' + doc + '">' + link + '</a>';
            overlay.setPosition(coordinate);
        }
    }
    
    closer.onclick = function () {
            overlay.setPosition(undefined);
            closer.blur();
            return false;
        };
    function removeOptions(selectElement) {
            var i, L = selectElement.options.length - 1;
            for (i = L; i >= 0; i--) {
                selectElement.remove(i);
            }
        }

    const features = vectorGraves.getSource().getFeatures();
    const knInput = document.querySelector("[kn-search]");
    var knList = document.getElementById('kn2');

    knInput.addEventListener('input', (e) => {

        const kn = e.target.value;

        searchFeatures("name", kn);

    })

    function searchFeatures(propertyName, propertyValue) {
        removeOptions(knList)
        var matchingFeatures = [];
        features.forEach(function (feature) {
            var value = feature.get(propertyName)
            if (value && value.toString().toLowerCase().indexOf(propertyValue.toLowerCase()) !== -1) {
                matchingFeatures.push(feature);
            }
        });

        matchingFeatures.forEach(function (feature) {
            var option = document.createElement('option');
            option.value = feature.get(propertyName);
            option.text = feature.get(propertyName);
            knList.appendChild(option);
        });

        knList.addEventListener('click', function (e) {
            var count = knList.options.length;
            if (typeof (count) === "undefined" || count < 2) {
                select.getFeatures().clear();
                var featureKN = knList.value;
                var featureFound = null;
                features.forEach(function (feature) {
                    if (feature.get(propertyName) === featureKN) {
                        featureFound = feature;
                    }
                });
                if (featureFound) {
                    var extent = featureFound.getGeometry().getExtent();
                    var geom = ol.geom.Polygon.fromExtent(extent);
                    var padding = [100, 100, 100, 100];
                    geom.scale(3.5);
                    map.getView().fit(geom, { duration: 1000 }, { padding: padding });
                    select.getFeatures().push(featureFound);
                }
            }
        });
        knList.addEventListener('change', function (e) {
            select.getFeatures().clear();
            var featureKN = knList.value;
            var featureFound = null;
            features.forEach(function (feature) {
                if (feature.get(propertyName) === featureKN) {
                    featureFound = feature;
                }
            });
            if (featureFound) {
                var extent = featureFound.getGeometry().getExtent();
                var geom = ol.geom.Polygon.fromExtent(extent);

                geom.scale(1.8);
                map.getView().fit(geom, { duration: 1000 });
                select.getFeatures().push(featureFound);
            }
        });
    }
  </script>
</body>
</html>