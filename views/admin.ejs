<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet"> 
    <link rel="stylesheet" href="ol3-sidebar.css">
    <style>
		form {
			overflow: hidden;
		}
		form.art1 {
			text-align:right;
			width: 250px;
		}
		input {
			width: 150px;
			float: right;
			clear: both;
		}
		input[type='file'] {
			color: transparent;
		}
         body {
			height: 100%;
            padding: 0;
            margin: 0;
            font-family: arial;
        }

        html, body{
            height: 100%;
            font: 10pt "Helvetica Neue", Arial, Helvetica, sans-serif;
        }

        .lorem {
            font-style: italic;
            color: #AAA;
        }
        
        #modify_feature {
            position: absolute;
            z-index: 500;
            top: 1%;
            left: 34%;
        }
        
        #create_feature {
            position: absolute;
            z-index: 500;
            top: 1%;
            left: 18%;
        }

        #delete_feature {
            position: absolute;
            z-index: 500;
            top: 1%;
            left: 22.5%;
        }

        #get_info {
            position: absolute;
            z-index: 500;
            top: 1%;
            left: 70%;

        }
        #toggle_editing {
            position: absolute;
            z-index: 500;
            top: 1%;
            left: 55%;
        }
        #map {
            position: absolute;
            top: 0%;
            left: 0%;
            width: 100%;
            height: 100%;
            overflow: scroll;
            border: 0.5px solid #4CAF50;
        }
        .ol-popup {
            position: absolute;
            background-color: white;
            -webkit-filter: drop-shadow(0 1px 4px rgba(0, 0, 0, 0.2));
            filter: drop-shadow(0 1px 4px rgba(0, 0, 0, 0.2));
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #cccccc;
            bottom: 12px;
            left: -50px;
            min-width: 280px;
        }

        .ol-popup:after,
        .ol-popup:before {
            top: 100%;
            border: solid transparent;
            content: " ";
            height: 0;
            width: 0;
            position: absolute;
            pointer-events: none;
        }

        .ol-popup:after {
            border-top-color: white;
            border-width: 10px;
            left: 48px;
            margin-left: -10px;
        }

        .ol-popup:before {
            border-top-color: #cccccc;
            border-width: 11px;
            left: 48px;
            margin-left: -11px;
        }

        .ol-popup-closer {
            text-decoration: none;
            position: absolute;
            top: 2px;
            right: 8px;
        }

        .ol-popup-closer:after {
            content: "X";
        
        }

    </style>
</head>
<body>
<div id="sidebar" class="sidebar collapsed">
    <!-- Nav tabs -->
    <div class="sidebar-tabs">
        <ul role="tablist">
            <li><a href="#search" role="tab"><i class="fa fa-search"></i></a></li>
            <li><a href="#user" role="tab"><i class="fa fa-user"></i></a></li>
            <li><a href="#ruler" role="tab"><i class="fa fa-pencil"></i></a></li>
        </ul>

        <ul role="tablist">
            <li class="disabled"><a href="#settings" role="tab"><i class="fa fa-gear"></i></a></li>
        </ul>
    </div>

    <!-- Tab panes -->
    <div class="sidebar-content">

        <div class="sidebar-pane" id="search">
            <h1 class="sidebar-header">Поиск<span class="sidebar-close"><i class="fa fa-caret-left"></i></span></h1>
            <h2>Поиск:</h2>
            <form id="search" class="art1">
                <input type='search' id="kn" kn-search>
                <select id="opt" name="opt">
                    <option value="name">Имя</option>
                    <option value="extra">доп.</option>
                  </select>
                <select name="kn" id="kn2">
                </select>
            </form>
        </div>

        <div class="sidebar-pane" id="user">
            <h1 class="sidebar-header">Пользователь<span class="sidebar-close"><i class="fa fa-caret-left"></i></span>
            </h1>
            <h2>Добро пожаловать, <%= username %></h2>

            <form action="/auth/logout" method="post">
                <input type="submit" name="Выход" value="Выход">
            </form>
        </div>

        <div class="sidebar-pane" id="ruler">
            <h1 class="sidebar-header">Измерения<span class="sidebar-close"><i class="fa fa-caret-left"></i></span>
            </h1>
            <button name="ruler" id="ruler">Измерить</button>
        </div>

        <div class="sidebar-pane" id="settings">
            <h1 class="sidebar-header">Настройки<span class="sidebar-close"><i class="fa fa-caret-left"></i></span></h1>
        </div>
    </div>
</div>
<div id="map" class="map">
    <button name="info" id="get_info">Инфо</button>
	<button name="modify" id="modify_feature">Редактировать</button>
    <button name="create_feature" id="create_feature">Создать</button>
    <button name="delete_feature" id="delete_feature">Удалить</button>
</div>
<div id="popup" class="ol-popup">
    <a href="#" id="popup-closer" class="ol-popup-closer"></a>
    <div id="popup-content">
    </div>
</div>
  <!-- <script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.9.0/build/ol.js"></script> -->
  <script src="ol.js"></script>
  <script src="ol3-sidebar.js"></script>
  <script>
    const graves = '<%- JSON.stringify(graves) %>';

    const vectorSourceGraves = new ol.source.Vector({
	    features: new ol.format.GeoJSON().readFeatures(graves),
    });

    const style_base = new ol.style.Style({
        stroke: new ol.style.Stroke({
            color: 'rgba(255, 0, 0, 1)',
            width: 2,
        }),
            fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0)',
        }),
        text: new ol.style.Text({
            font: 'bold 14px "Times New Roman", "Arial Unicode MS", "sans-serif"',
            fill: new ol.style.Fill({
                color: 'black',
            }),
        }),
    });
    const highlightStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(255,255,255,0.35)',
        }),
        stroke: new ol.style.Stroke({
            color: '#0000FF',
            width: 4,
        }),
        text: new ol.style.Text({
            font: 'bold 11px "Open Sans", "Arial Unicode MS", "sans-serif"',
            placement: 'point',
            fill: new ol.style.Fill({
            color: 'black',
            }),
        }),
    });

    const ruler_style = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0.2)',
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(0, 0, 0, 0.5)',
            lineDash: [10, 10],
            width: 2,
        }),
        image: new ol.style.Circle({
            radius: 5,
            stroke: new ol.style.Stroke({
            color: 'rgba(0, 0, 0, 0.7)',
            }),
            fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0.2)',
            }),
        }),
        });

    const vectorGraves = new ol.layer.Vector({
        minZoom: 13,
        source: vectorSourceGraves,
        style: function (feature) {
            if (feature.get('id')) {
                style_base.getText().setText(feature.get('id').toString());
                return style_base;
            }
            return ruler_style;
        },
    });

    const ruler_source = new ol.source.Vector();

    const ruler_vector = new ol.layer.Vector({
        source: ruler_source,
        style: ruler_style
    });

    const container = document.getElementById('popup');
    const content = document.getElementById('popup-content');
    const closer = document.getElementById('popup-closer');

    const overlay = new ol.Overlay({
    element: container,
    autoPan: {
        animation: {
        duration: 250,
        },
    },
    });

    const centreLonLat = [29.8559,57.6346];
    const centreWebMercator = ol.proj.fromLonLat(centreLonLat);  

    const view =  new ol.View({
        projection: 'EPSG:3857',
        center: centreWebMercator,
        zoom: 19.2
    });

    const osmLayer = new ol.layer.Tile({
                        title: 'OSM',
                        type: 'base',
                        visible: true,
                        source: new ol.source.OSM()
                    });

    var layers = [osmLayer, vectorGraves, ruler_vector];

    var map = new ol.Map({
        target: 'map',
        controls: [],
        layers: layers,
        overlays: [overlay],
        view: view
    });

    const featureOverlay = new ol.layer.Vector({
            title: 'high',
            source: new ol.source.Vector(),
            map: map,
            style: highlightStyle
        });

    const select = new ol.interaction.Select({
            layers: [vectorGraves], style: function (feature) {
                if (feature.get('id')) {
                    highlightStyle.getText().setText(feature.get('id').toString());
                }
                return highlightStyle;
            }, condition: ol.events.condition.singleClick,
        });
    const sidebar = new ol.control.Sidebar({ element: 'sidebar', position: 'left' });
    map.addControl(sidebar);
    map.addInteraction(select);
    document.querySelector('button[id="get_info"]').addEventListener('click', showPop);
    document.querySelector('button[name="modify"]').addEventListener('click', modify_feature);
    document.querySelector('button[id="create_feature"]').addEventListener('click', create_feature);
    document.querySelector('button[id="delete_feature"]').addEventListener('click', delete_feature);
    document.querySelector('button[id="ruler"]').addEventListener('click', ruler);
    
    let info_switch = 0; 
    let modify_switch = 0;
    let create_switch = 0;
    let delete_switch = 0;
    let ruler_switch = 0;

    function showPop() {
            if (info_switch == 0) {
                document.getElementById("get_info").style.backgroundColor = "coral";
                document.getElementById("modify_feature").style.backgroundColor = "";
                document.getElementById("create_feature").style.backgroundColor = "";
                document.getElementById("delete_feature").style.backgroundColor = "";

                document.getElementById("modify_feature").disabled = true;
                document.getElementById("create_feature").disabled = true;
                document.getElementById("delete_feature").disabled = true;
                document.getElementById("get_info").disabled = false;
                map.on("singleclick", highlight_info);
                info_switch = 1;
            } else {
                document.getElementById("get_info").style.backgroundColor =
                    "rgb(239, 239, 239)";
                document.getElementById("modify_feature").style.backgroundColor =
                    "rgb(239, 239, 239)";
                document.getElementById("create_feature").style.backgroundColor =
                    "rgb(239, 239, 239)";
                document.getElementById("delete_feature").style.backgroundColor =
                    "rgb(239, 239, 239)";
                document.getElementById("modify_feature").disabled = false;
                document.getElementById("create_feature").disabled = false;
                document.getElementById("delete_feature").disabled = false;
                document.getElementById("get_info").disabled = false;
                map.un("singleclick", highlight_info);

                overlay.setPosition(undefined);
                closer.blur();
                info_switch = 0;
            }
        }

    function highlight_info(evt) {
        
        const coordinate = evt.coordinate;
        const hdms = ol.coordinate.toStringHDMS(ol.proj.fromLonLat(coordinate));
        var features = map.getFeaturesAtPixel(evt.pixel, {
            layerFilter: function (layer) {
                return layer === vectorGraves;
            },
        });
        if (features.length > 0) {
            var n = features[0].get('id').toString();
            var name = features[0].get('name');
            //var years = features[0].get('years');
            var id = features[0].get('id');
            var extra = features[0].get('extra');
            var born = features[0].get('born');
            var died = features[0].get('died');
            var life = "";
            if (born) {
                life = born + " - " + died;
            } else {
                if (died) {
                    life = "Дата смерти: " + died;
                }
            }
            var doc = features[0].get('doc');
            var link = "";
            if (doc) {
                link = "Документ"
            }
            var pic = features[0].get('pic')
            if (pic == undefined || pic == "") {
                pic = 'default.jpg'
            }
            content.innerHTML = '<img src="' + 'images/' + pic + '" style="width: 300px; height: 450px;">' + '<p><code>' + extra + '</code></p>' + '<h2><code>' + name + '</code></h2><p><code>' + life + '</code></p><a href="pdf/' + doc + '">' + link + '</a>';
            overlay.setPosition(coordinate);
        }
    }
    
    function modify_feature() {
        if (modify_switch == 0) {
                document.getElementById("modify_feature").style.backgroundColor = 'coral';
                document.getElementById("get_info").disabled = true;
                document.getElementById("create_feature").disabled = true;
                document.getElementById("delete_feature").disabled = true;
                source_mod = featureOverlay.getSource();
		
                //Код для изменения полигонов
                modify = new ol.interaction.Modify({
                    source: source_mod
                });
                map.addInteraction(modify);

                var source_g = vectorGraves.getSource();
                snap_edit = new ol.interaction.Snap({
                   source: source_g
                });
                map.addInteraction(snap_edit);

                map.on('click', highlight_mod_attributes);
                modify_switch = 1;
            }
            else {
                document.getElementById("modify_feature").style.backgroundColor = 'rgb(239, 239, 239)';
                document.getElementById("create_feature").style.backgroundColor = 'rgb(239, 239, 239)';
                document.getElementById("delete_feature").style.backgroundColor = 'rgb(239, 239, 239)';

                document.getElementById("modify_feature").disabled = false;
                document.getElementById("create_feature").disabled = false;
                document.getElementById("delete_feature").disabled = false;
                document.getElementById("get_info").disabled = false;

                map.un('click', highlight_mod_attributes);
                overlay.setPosition(undefined);
                featureOverlay.getSource().clear();
                closer.blur();
                modify_switch = 0;
            }
    }  
    
    let editFeature, editId, myFeature,draw_add, ind;
    function highlight_mod_attributes(evt) {
            if (featureOverlay) {
                featureOverlay.getSource().clear();
                map.removeLayer(featureOverlay);
            }
            feature = map.forEachFeatureAtPixel(evt.pixel,
                function (feature, layer) {
                    return feature;
                });

            if (feature) {
                editFeature = feature;
                var geometry = feature.getGeometry();
                var coord = geometry.getCoordinates();
                var coordinate = evt.coordinate;
                //alert(coordinate);
                featureOverlay.getSource().addFeature(feature);
                //overlays.getLayers().push(featureOverlay);
                // const coords = feature.getCoordinates();
                // const writer = new ol.format.GeoJSON();
                // const newCoords = writer.writeFeatures(coords);
                
                var fio = feature.get('name');
                var ye = feature.get('died');
                var ye1 = feature.get('born');
                var extra = feature.get('extra');
                var id = feature.get('id');
                editId = id;
                //Фото
                content1 = '<form method="post" action="/admin/edit/' + id + '" enctype="multipart/form-data"><label for="pic">Фото</label><input type="file" id="pic" name="pic" accept="image/png, image/jpeg"><br><br>';
                content1 += '<label for="extra">Дополнительно</label><input type="text" id="extra" name="extra" value=' + '"' + extra + '"' + '><br><br>';
                content1 += '<label for="name">ФИО</label><input type="text" id="name" name="name" value=' + '"' + fio + '"' + '><br><br>';
                content1 += '<label for="yearb">Дата рождения</label><input type="text" id="yearb" name="yearb" value=' + '"' + ye1 + '"' + '><br><br>';
                content1 += '<label for="years">Дата смерти</label><input type="text" id="years" name="years" value=' + '"' + ye + '"' + '><br><br>';
                //Архивный документ
                content1 += '<label for="doc">Архивный документ</label><input type="file" id="doc" name="doc" accept="application/pdf, application/msword, text/plain"><br><br>';
                content1 += ' <button id = "save_mod_features" type="submit" name="save">Сохранить</button>';
                content1 += ' <button id = "cancel_mod_features" type = "button">Отмена</button></form>';

                //  alert(feature.getId());
                content.innerHTML = content1;
                document.querySelector('button[id="cancel_mod_features"]').addEventListener('click', cancel_mod_features);
                document.querySelector('button[id="save_mod_features"]').addEventListener('click', save_mod_features);
                overlay.setPosition(coordinate);

                map.updateSize();
            }
        }
    
    function cancel_mod_features() {
            featureOverlay.getSource().clear();
            overlay.setPosition(undefined);
            closer.blur();
        }

    function save_mod_features() {
        const newCoords = editFeature.getGeometry().getCoordinates();
        console.log(newCoords);
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.open("POST", "/admin/edit/" + editId);
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send(JSON.stringify({coordinates : newCoords}));
        alert();
        photo = document.getElementById("pic");
	    const files = photo.files;

        overlay.setPosition(undefined);
        closer.blur();
        featureOverlay.getSource().clear();
        location.reload();
    }
    
    function create_feature() {
        if (create_switch == 0) {
                document.getElementById("create_feature").style.backgroundColor = 'coral';
                document.getElementById("get_info").disabled = true;
                document.getElementById("modify_feature").disabled = true;
                document.getElementById("delete_feature").disabled = true;

                var source_g = vectorGraves.getSource();
                draw_add = new ol.interaction.Draw({
                    source: source_g,
                    type: 'Polygon'
                });

                ind = source_g.getFeatures().length + 1;
                map.addInteraction(draw_add);
                //var source_g = geojson.getSource();
                snap_edit = new ol.interaction.Snap({
                    source: source_g
                });
                map.addInteraction(snap_edit);
                draw_add.on('drawend',
                    function(e) {
                        myFeature = e.feature;
                        if (myFeature) {

                            var geometry = myFeature.getGeometry();
                            var coord = geometry.getCoordinates();
                            var extent = geometry.getExtent();
                            var centroid = ol.extent.getCenter(extent);
                            myFeature.set("id",ind);
                            //alert(centroid);
                            //var coordinate = e.coordinate;

                            featureOverlay.getSource().addFeature(myFeature);
                            //overlays.getLayers().push(featureOverlay);


                            content1 = '<form method="post" action="/admin/create/" enctype="multipart/form-data"><label for="pic">Фото</label><input type="file" id="pic2" name="pic2" accept="image/png, image/jpeg"><br><br>';
                            content1 += '<label for="extra">Дополнительно</label><input type="text" id="extra2" name="extra2" value=' + '"' + '"' + '><br><br>';
                            content1 += '<label for="name">ФИО</label><input type="text" id="name2" name="name2" value=' + '"' + '"' + '><br><br>';
                            content1 += '<label for="yearb">Дата рождения</label><input type="text" id="yearb2" name="yearb2" value=' + '"' + '"' + '><br><br>';
                            content1 += '<label for="years">Дата смерти</label><input type="text" id="years2" name="years2" value=' + '"' + '"' + '><br><br>';
                            //Архивный документ
                            content1 += '<label for="doc">Архивный документ</label><input type="file" id="doc2" name="doc2" accept="application/pdf, application/msword, text/plain"><br><br>';
                            content1 += ' <button id = "save_created" type = "submit">Сохранить</button>';
                            content1 += ' <button id = "cancel_created" type = "button">Удалить</button></form>';
                            //  alert(feature.getId());
                            //alert(content1);
                            content.innerHTML = content1;
                            document.querySelector('button[id="cancel_created"]').addEventListener('click', cancel_created);
                            document.querySelector('button[id="save_created"]').addEventListener('click', save_created);
                            overlay.setPosition(centroid);

                    }}, this);
                create_switch = 1;
        }
        else {
                document.getElementById("create_feature").style.backgroundColor = 'rgb(239, 239, 239)';
                document.getElementById("get_info").style.backgroundColor = 'rgb(239, 239, 239)';
                document.getElementById("delete_feature").style.backgroundColor = 'rgb(239, 239, 239)';

                document.getElementById("modify_feature").disabled = false;
                document.getElementById("create_feature").disabled = false;
                document.getElementById("get_info").disabled = false;
                document.getElementById("delete_feature").disabled = false;
                map.removeInteraction(draw_add)
                create_switch = 0;
        }
    }
    function save_created() {
        const newCoords = myFeature.getGeometry().getCoordinates();
        console.log(newCoords)
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.open("POST", "/admin/create/");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send(JSON.stringify({coordinates : newCoords}));
        alert();
        //var formData = new FormData();
        //formData.append("coordinates", newCoords);
        //formData.append("pic", pic);
        //xmlhttp.send(formData);
        vectorGraves.getSource().refresh();
        overlay.setPosition(undefined);
        closer.blur();
        featureOverlay.getSource().clear();
        location.reload();
    }
    function cancel_created() {
        featureOverlay.getSource().clear();
        vectorGraves.getSource().removeFeature(myFeature);
        overlay.setPosition(undefined);
        closer.blur();
    }
    
    function delete_feature() {
        if (delete_switch== 0) {
                document.getElementById("delete_feature").style.backgroundColor = 'coral';
                document.getElementById("get_info").disabled = true;
                document.getElementById("modify_feature").disabled = true;
                document.getElementById("create_feature").disabled = true;

                map.on("singleclick", delete_info);
                delete_switch = 1
        } else {
                document.getElementById("create_feature").style.backgroundColor = 'rgb(239, 239, 239)';
                document.getElementById("get_info").style.backgroundColor = 'rgb(239, 239, 239)';
                document.getElementById("delete_feature").style.backgroundColor = 'rgb(239, 239, 239)';

                document.getElementById("modify_feature").disabled = false;
                document.getElementById("create_feature").disabled = false;
                document.getElementById("get_info").disabled = false;
                document.getElementById("delete_feature").disabled = false;

                map.un("singleclick", delete_info);
                delete_switch = 0
        }
    }

    function delete_info(evt) {
        const coordinate = evt.coordinate;
        const hdms = ol.coordinate.toStringHDMS(ol.proj.fromLonLat(coordinate));
        var features = map.getFeaturesAtPixel(evt.pixel, {
            layerFilter: function (layer) {
                return layer === vectorGraves;
            },
        });
        if (features.length > 0) {
            var deleteId = features[0].get('id').toString();
            if (confirm("Вы уверены, что хотите удалить этот объект?")) {
                var xmlhttp = new XMLHttpRequest();
                xmlhttp.open("POST", "/admin/delete/" + deleteId);
                xmlhttp.setRequestHeader("Content-Type", "application/json");
                xmlhttp.send();
            } 
        }
    }

    let sketch;
    let helpTooltipElement;
    let helpTooltip;
    let measureTooltipElement;
    let measureTooltip;

    let listebner;
    function ruler() {
        if (ruler_switch == 0) {
            var source_g = ruler_vector.getSource();
            draw_line = new ol.interaction.Draw({
                source: source_g,
                type: 'LineString'
            });
            map.addInteraction(draw_line)

            createMeasureTooltip();
            createHelpTooltip();

            draw_line.on('drawstart', function (evt) {
                sketch = evt.feature;
                let tooltipCoord = evt.coordinate;
                listener = sketch.getGeometry().on('change', function (evt) {
                    const geom = evt.target;
                    let output;
                    if (geom instanceof ol.geom.LineString) {
                        output = formatLength(geom);
                        tooltipCoord = geom.getLastCoordinate();
                    }
                    measureTooltipElement.innerHTML = output;
                    measureTooltip.setPosition(tooltipCoord);
                })
            });
            draw_line.on('drawend', function () {
                measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';
                measureTooltip.setOffset([0, -7]);
                // unset sketch
                sketch = null;
                // unset tooltip so that a new one can be created
                measureTooltipElement = null;
                createMeasureTooltip();
                ol.Observable.unByKey(listener);
            });
            ruler_switch = 1
        } else {
            map.removeInteraction(draw_line)
            ruler_switch = 0
        }
    }
    
    const formatLength = function (line) {
        const length = ol.sphere.getLength(line);
        let output;
        if (length > 100) {
            output = Math.round((length / 1000) * 100) / 100 + ' ' + 'km';
        } else {
            output = Math.round(length * 100) / 100 + ' ' + 'm';
        }
        return output;
    }

    function createHelpTooltip() {
        if (helpTooltipElement) {
            helpTooltipElement.parentNode.removeChild(helpTooltipElement);
        }
        helpTooltipElement = document.createElement('div');
        helpTooltipElement.className = 'ol-tooltip hidden';
        helpTooltip = new ol.Overlay({
            element: helpTooltipElement,
            offset: [15, 0],
            positioning: 'center-left',
        });
        map.addOverlay(helpTooltip);
    }

/**
 * Creates a new measure tooltip
 */
function createMeasureTooltip() {
  if (measureTooltipElement) {
    measureTooltipElement.parentNode.removeChild(measureTooltipElement);
  }
  measureTooltipElement = document.createElement('div');
  measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';
  measureTooltip = new ol.Overlay({
    element: measureTooltipElement,
    offset: [0, -15],
    positioning: 'bottom-center',
    stopEvent: false,
    insertFirst: false,
  });
  map.addOverlay(measureTooltip);
}
    closer.onclick = function () {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
    };
    function removeOptions(selectElement) {
            var i, L = selectElement.options.length - 1;
            for (i = L; i >= 0; i--) {
                selectElement.remove(i);
            }
        }

    const features = vectorGraves.getSource().getFeatures();
    const knInput = document.querySelector("[kn-search]");
    var knList = document.getElementById('kn2');

    knInput.addEventListener('input', (e) => {
        const kn = e.target.value;
        const opt = document.getElementById('opt');
        console.log(opt);
        switch(opt.value) {
            case "name": {
                searchFeatures("name", kn);
                break;
            }
            case "extra": {
                searchFeatures("extra", kn);
                break;
            }


        }
    })

    function searchFeatures(propertyName, propertyValue) {
        removeOptions(knList)
        var matchingFeatures = [];
        features.forEach(function (feature) {
            var value = feature.get(propertyName)
            if (value && value.toString().toLowerCase().indexOf(propertyValue.toLowerCase()) !== -1) {
                matchingFeatures.push(feature);
            }
        });

        matchingFeatures.forEach(function (feature) {
            var option = document.createElement('option');
            option.value = feature.get(propertyName);
            option.text = feature.get(propertyName);
            knList.appendChild(option);
        });

        knList.addEventListener('click', function (e) {
            var count = knList.options.length;
            if (typeof (count) === "undefined" || count < 2) {
                select.getFeatures().clear();
                var featureKN = knList.value;
                var featureFound = null;
                features.forEach(function (feature) {
                    if (feature.get(propertyName) === featureKN) {
                        featureFound = feature;
                    }
                });
                if (featureFound) {
                    var extent = featureFound.getGeometry().getExtent();
                    var geom = ol.geom.Polygon.fromExtent(extent);
                    var padding = [100, 100, 100, 100];
                    geom.scale(3.5);
                    map.getView().fit(geom, { duration: 1000 }, { padding: padding });
                    select.getFeatures().push(featureFound);
                }
            }
        });
        knList.addEventListener('change', function (e) {
            select.getFeatures().clear();
            var featureKN = knList.value;
            var featureFound = null;
            features.forEach(function (feature) {
                if (feature.get(propertyName) === featureKN) {
                    featureFound = feature;
                }
            });
            if (featureFound) {
                var extent = featureFound.getGeometry().getExtent();
                var geom = ol.geom.Polygon.fromExtent(extent);

                geom.scale(1.8);
                map.getView().fit(geom, { duration: 1000 });
                select.getFeatures().push(featureFound);
            }
        });
    }
  </script>
</body>
</html>